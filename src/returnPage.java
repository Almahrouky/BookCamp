/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.*;
import java.util.HashSet;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author EL-BOSTAN
 */
public class returnPage extends javax.swing.JFrame {
    private String username = "";
    
    /**
     * Creates new form returnPage
     */
    public returnPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        bookIdField = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Books you borrowed");

        jTable1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Book ID", "Book Name", "Copies Borrowed"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setFont(new java.awt.Font("Andalus", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 51, 51));
        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Andalus", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(51, 102, 255));
        jButton2.setText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Enter the book id to return");

        bookIdField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookIdFieldActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Andalus", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(51, 102, 255));
        jButton3.setText("Return");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bookIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bookIdFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookIdFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookIdFieldActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try {
            Connection connection = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/library_management_system",
                "root",
                "MHRQ"
            );
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            String query = """
                select * from borrowed_books where username = ?;
            """;
            PreparedStatement statement = connection.prepareStatement(query);
            statement.setString(1, username); // index (1-based), value
            
            ResultSet result = statement.executeQuery();
            
            HashSet<String> set = new HashSet<>();
            while (result.next()) {
                String book_id = result.getString("book_id");
                if(set.contains(book_id)) continue;
                set.add(book_id);
                
                Integer borrowedNum = 0, returnNum = 0;
                String queryName = """
                                   select book_name from book where id = ?;
                                   """;
                String qborrowedNum = """
                               select * from borrowed_books where book_id = ? and status = 'borrowed';
                               """;
                String qreturnNum = """
                               select * from borrowed_books where book_id = ? and status = 'returned';
                               """;
                statement = connection.prepareStatement(queryName);
                statement.setString(1, book_id);
                ResultSet res = statement.executeQuery();
                String book_name = "";
                while(res.next()){
                    book_name = res.getString("book_name");
                    break;
                }
                statement = connection.prepareStatement(qborrowedNum);
                statement.setString(1, book_id);
                res = statement.executeQuery();
                while(res.next()){
                    borrowedNum++;
                }
                statement = connection.prepareStatement(qreturnNum);
                statement.setString(1, book_id);
                res = statement.executeQuery();
                while(res.next()){
                    returnNum++;
                }
                if(borrowedNum > returnNum){
                    model.addRow(new Object[] {book_id, book_name, borrowedNum - returnNum});
                }
                
                res.close();
            }

            result.close();
            statement.close();
            connection.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private boolean checkBorrowed(Integer book_id){
        boolean can = false;
        try {
            Connection connection = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/library_management_system",
                "root",
                "MHRQ"
            );
            String query = """
                select * from borrowed_books where book_id = ?;
            """;
            PreparedStatement statement = connection.prepareStatement(query);
            statement.setInt(1, book_id); // index (1-based), value
            ResultSet result = statement.executeQuery();
            Integer borrowed = 0, returned = 0;
            while(result.next()){
                String status = result.getString("status");
                if(status.equals("borrowed")) ++borrowed;
                else if(status.equals("returned")) ++returned;
            }
            if(borrowed > returned) can = true;
            else can = false;
            
            result.close();
            statement.close();
            connection.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        return can;
    }
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try {
            if(bookIdField.getText().equals("")){
                JOptionPane.showMessageDialog(this, "Enter the book id");
                return;
            }
            Integer book_id = Integer.parseInt(bookIdField.getText());
            Connection connection = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/library_management_system",
                "root",
                "MHRQ"
            );
            
            // checking if the book in the library
            String checkFind = """
                           select id from book where id = ?;
                           """;
            PreparedStatement statement = connection.prepareStatement(checkFind);
            statement.setInt(1, book_id);
            ResultSet res = statement.executeQuery();
            boolean find = false;
            if(res.next()){
               find = true; 
            }
            if(!find){
                JOptionPane.showMessageDialog(this, "This book was not found");
                return;
            }
            
            // checking if the book was borrowed
            boolean borrowed = checkBorrowed(book_id);
            if(!borrowed){
                JOptionPane.showMessageDialog(this, "This book is not in your borrowed books list");
                return;
            }
            
            // query to update copies in the end
            String query = """
                           update book
                           set copies = ? where id = ?;
                           """;
            
            
            String getCopies = """
                               select copies from book where id = ?;
                               """;
            statement = connection.prepareStatement(getCopies);
            statement.setInt(1, book_id);
            res = statement.executeQuery();
            Integer oldCopies = 0;
            while(res.next()){
                oldCopies = res.getInt("copies");
                break;
            }
            
            statement = connection.prepareStatement(query);
            statement.setInt(1, oldCopies + 1); // index (1-based), value
            statement.setInt(2, book_id);
            Integer result = statement.executeUpdate();
            
            String trans = """
                           insert into borrowed_books
                           values (?, ?, ?, 'returned');
                           """;
            
            // getting the user id
            String getUser_id = """
                                select id from user where username = ?;
                                """;
            statement = connection.prepareStatement(getUser_id);
            statement.setString(1, username);
            res = statement.executeQuery();
            Integer user_id = 0;
            while(res.next()){
                user_id = res.getInt("id");
                break;
            }
            
            // now execute trans query
            statement = connection.prepareStatement(trans);
            statement.setInt(1, user_id);
            statement.setString(2, username);
            statement.setInt(3, book_id);
            result = statement.executeUpdate();
            
            res.close();
            statement.close();
            connection.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_jButton3ActionPerformed
    
    public void setUsername(String s){
        username = s;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(returnPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(returnPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(returnPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(returnPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new returnPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bookIdField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
